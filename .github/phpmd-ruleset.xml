<?xml version="1.0"?>
<ruleset name="Hello World rule set">
    <description>
        Hello World
    </description>
    <pmd version="@project.version@" timestamp="2023-05-26T14:53:10+00:00">
        <!--
          Complexity is determined by the number of decision points in a method plus one for the method entry.
          The decision points are 'if', 'while', 'for', and 'case labels'.
          Generally, 1-4 is low complexity, 5-7 indicates moderate complexity, 8-10 is high complexity,
          and 11+ is very high complexity.
        -->
        <rule ref="PHPMD/Rule/CodeSize/CyclomaticComplexity">
            <priority>1</priority>
            <properties>
                <!--<property name="reportLevel" value="5" />-->
                <property name="reportLevel" value="1" /><!-- Make it fail -->
            </properties>
        </rule>

        <!--
          The NPath complexity of a method is the number of acyclic execution paths through that method.
          A threshold of 200 is generally considered the point where measures should be taken to reduce complexity.
        -->
        <rule ref="PHPMD/Rule/CodeSize/NPathComplexity"/>

        <!--
          Violations of this rule usually indicate that the method is doing too much. Try to reduce the method size by
          creating helper methods and removing any copy/pasted code.
        -->
        <rule ref="PHPMD/Rule/CodeSize/ExcessiveMethodLength"/>

        <!--
          Long Class files are indications that the class may be trying to do too much. Try to break it down, and reduce
          the size to something manageable.
        -->
        <rule ref="PHPMD/Rule/CodeSize/ExcessiveClassLength"/>

        <!--
          Long parameter lists can indicate that a new object should be created to wrap the numerous parameters.
          Basically, try to group the parameters together.
        -->
        <rule ref="PHPMD/Rule/CodeSize/ExcessiveParameterList"/>

        <!--
          A large number of public methods and attributes declared in a class can indicate the class may need to be
          broken up as increased effort will be required to thoroughly test it.
        -->
        <rule ref="PHPMD/Rule/CodeSize/ExcessivePublicCount"/>

        <!--
          Classes that have too many fields could be redesigned to have fewer fields, possibly through some nested
          object grouping of some information.
        -->
        <rule ref="PHPMD/Rule/CodeSize/TooManyFields"/>

        <!--
          A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and
          find a way to have more fine-grained objects. By default, it ignores methods starting with 'get' or 'set'.
        -->
        <rule ref="PHPMD/Rule/CodeSize/TooManyMethods"/>

        <!--
          A class with too many public methods is probably a good suspect for refactoring, in order to reduce its
          complexity and find a way to have more fine-grained objects. By default, it ignores methods starting with
          'get' or 'set'.
        -->
        <rule ref="PHPMD/Rule/CodeSize/TooManyPublicMethods"/>

        <!--
          The Weighted Method Count (WMC) of a class is a good indicator of how much time and effort is required to
          modify and maintain this class. The WMC metric is defined as the sum of complexities of all methods declared
          in a class. A large number of methods also means that this class has a greater potential impact on derived
          classes.
        -->
        <rule ref="PHPMD/Rule/CodeSize/ExcessiveClassComplexity"/>
    </pmd>
</ruleset>
