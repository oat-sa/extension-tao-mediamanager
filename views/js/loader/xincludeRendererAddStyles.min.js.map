{"version":3,"mappings":"AAsBA,YACA,aADA,GAKAA,mDALA,CAMAC,kDANA,CAOAC,+CAPA,CASAC,4CACAC,qBADA,CAEAC,2DAFA,CAGAC,+CAHA,CAIA,IACAF,oCACA,YACAA,oBACA,CACAG,qDACA,+CACAA,cADA,GAEAA,iBAFA,CAGAC,mCAHA,CAKA,CALA,CAMAC,gEAPA,CAQA,gCARA,EASAC,iBAEA,CAXA,CAYA,CA9BA,CAiCAH,sCAGAA,kBAHA,GAMAA,gBANA,CAaAA,iDACAI,mBADA,CAEAA,sCAFA,CAGAA,4CACA,oEACA,CAFA,CAHA,CAMAC,2BACAD,+BACAJ,sBACA,CAFA,CADA,CAIAJ,gBACA,CALA,CAMA,CAzBA,EA4BAD,6CA5BA,CA6BAK,4BA7BA,CA+BAJ,gBAEA,CAjCA,CAkCA,CAnEA,G,CAqEAU,uC,CC1EAA,yDACA,QADA,EAEA,YACA,aAEA,4CACA,uDACA,SAFA,KAMAC,yCANA,CAOAC,eAPA,CASA,iBAEAC,iDAFA,CAGAC,qDAHA,CAMAC,6CANA,CAOA,iBAOA,WANAA,yBACA,oIACAC,cAFA,EAGAC,8CAEA,CALA,CAMA,CAdA,KAkBAC,wCAlBA,CAmBAC,yDAnBA,CAoBA,uBAQA,WAPAA,uCACAC,sDADA,CAEAC,2HAFA,CAGAA,oBAHA,EAIAJ,oDAEA,CANA,CAOA,CAIA,wDACA,0BAOA,WANAK,qCACA,4EACAC,uBAFA,EAGAN,uDAEA,CALA,CAQA,CACA,CAEA,+CAKA,sBALA,CAMAO,yBANA,CAOAC,gEAPA,CAUAC,uEAVA,CAYA,6BACAC,2CACAH,+BACA,CAFA,CADA,CAIA,0CACAG,mCACAH,8BACA,CAFA,CAGA,CAGA,CAUA,4EACA,aACA,SAGAI,mBALA,GAMAA,iCANA,EASA,sDAGA,sBACA,SAJA,KAYAC,qEAZA,CAaAC,4CAbA,CAeAC,kBAfA,CAiBA,yCAEA,oDACA,SAIA,4BACA,uCACAC,8CADA,GAEAA,8CACA,kCADA,CAEAJ,mBAFA,CAFA,EAWA,4BACAI,kDACAA,4CADA,EAEAA,0CAHA,CAMAC,qCAzBA,CA0BAF,8DA1BA,CA4BAA,wCAEA,CA/CA,MAiDAA,uBAjDA,CAkDA,iDAlDA,CAoDA,EACA,CArDA,EAuDA,wDACA,CA3EA,CA6EA,OACAG,oBADA,CAGA,CAlKA,C,CCAAxB,gEACA,QADA,CAEA,QAFA,CAGA,KAHA,CAIA,UAJA,CAKA,2BALA,CAMA,gDANA,EAOA,+CACA,aAEA,6NACA,oDAEA,gFACAyB,mFACAC,cADA,GAGAC,IAHA,CAGAC,WACAA,4CAEAC,gFACAH,cADA,CAEAI,0BAFA,EAFA,CAMAC,sBACAC,gBADA,CAEAC,eAFA,CAGAC,SAHA,CAIA,wBAJA,EANA,CAYAC,OAZA,GAaAJ,sEAbA,CAcAA,kCAdA,EAgBAK,sBACA,CAjBA,CAkBA,CAtBA,EAuBAC,KAvBA,EAwBA,CACA,CACA,CAxCA,C,CChBArC,8E","names":["loaderScript","configUrl","bundle","loadController","controllerOptions","controllerPath","params","window","controller","document","startController","bundles","require","define","path","linkTag","stylesheetUrl","rdf_styles","assets","assetClassName","_formatStyles","stylesheetSerial","passagesItem","passageWrapper","passageItemClassName","passagesPreview","passagePreviewClassName","CSSStyleSheet","classNameFormated","scopedCssRules","Object","replacementSelector","rulesInBrackets","selectors","scopedSelectors","singleSelectorText","scopeSelector","handleStylesheetLoad","request","uri","then","response","link","stylesheet","styleElem","rel","type","href","preview","head","catch"],"sources":["../../loader/bootstrap.js","../qtiCreator/helper/formatStyles.js","../richPassage/xincludeRendererAddStyles.js","module-create.js"],"sourcesContent":["/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016-2018 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Bootstrap the app, start the entry controller\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\n(function(){\n    'use strict';\n\n\n\n    var loaderScript = document.getElementById('amd-loader');\n    var configUrl = loaderScript.getAttribute('data-config');\n    var bundle  = loaderScript.getAttribute('data-bundle');\n\n    var loadController = function loadController(){\n        var controllerOptions = {};\n        var controllerPath = loaderScript.getAttribute('data-controller');\n        var params = loaderScript.getAttribute('data-params');\n        try{\n            controllerOptions = JSON.parse(params);\n        } catch(err){\n            controllerOptions = {};\n        }\n        window.require([controllerPath], function(controller) {\n            var startController = function startController(){\n                if(!window.started){\n                    window.started = true;\n                    controller.start(controllerOptions);\n                }\n            };\n            document.addEventListener('readystatechange', startController, false);\n            if (document.readyState === 'complete') {\n                startController();\n            }\n        });\n    };\n\n    //always start to load the config\n    window.require([configUrl], function() {\n\n        //define the global loading mechanism\n        if(!window.loadBundles){\n            //keep tracl of loaded bundles, even if require does it,\n            //this prevent some unecessary cycles\n            window.loaded = {};\n\n            /**\n             * Loading entry point for inter bundle dependency,\n             * always take the bundles from the params and window.bundles\n             * @param {String[]} [bundles] - an optional list of bundle to load\n             */\n            window.loadBundles = function loadBundles(bundles){\n                bundles = bundles || [];\n                bundles = bundles.concat(window.bundles)\n                bundles = bundles.filter( function(item, index){\n                    return item && bundles.indexOf(item) === index && window.loaded[item] !== true;\n                });\n                require(bundles, function(){\n                    bundles.forEach( function( item ) {\n                        window.loaded[item] = true;\n                    });\n                    loadController();\n                });\n            }\n        }\n\n        if(bundle || (window.bundles && window.bundles.length)) {\n            window.loadBundles([bundle]);\n        } else {\n            loadController();\n        }\n    });\n})();\n\ndefine(\"loader/bootstrap\", function(){});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2022 (original work) Open Assessment Technologies SA ;\n */\ndefine('taoMediaManager/qtiCreator/helper/formatStyles',[\n    'jquery'\n], function ($) {\n    'use strict';\n\n    function handleStylesheetLoad(e, stylesheet) {\n        if (stylesheet && stylesheet.name === 'tao-user-styles.css') {\n            return false;\n        }\n\n        // get cssRules from owner link tag, referenced in load event\n        const path = e && e.composedPath && e.composedPath();\n        const linkTag = path[0];\n\n        if (linkTag) {\n\n            const stylesheetUrl = linkTag.href.split('&stylesheet=');\n            const rdf_styles = stylesheetUrl[0].split('%23').reverse()[0];\n\n            // Asset & Asset Preview\n            const assets = $(`[data-identifier='${rdf_styles}']`);\n            if (assets.length) {\n                assets.each((h, asset) => {\n                    const assetClassName = asset.children[0].className.match(/[\\w-]*tao-[\\w-]*/g) || asset.children[1].className.match(/[\\w-]*tao-[\\w-]*/g);\n                    if (assetClassName) {\n                        _formatStyles(linkTag.sheet, assetClassName[0]);\n                    }\n                });\n                return;\n            }\n\n            // Passage on Item\n            const stylesheetSerial = linkTag.dataset.serial;\n            const passagesItem = $(`div[data-serial*='${stylesheetSerial}']`);\n            if (passagesItem.length) {\n                passagesItem.each((h, passages) => {\n                    const passageWrapper = $(passages).find('.qti-include > div');\n                    const passageItemClassName = passageWrapper[0] && passageWrapper[0].className && passageWrapper[0].className.match(/[\\w-]*tao-[\\w-]*/g);\n                    if (passageItemClassName) {\n                        _formatStyles(linkTag.sheet, passageItemClassName[0]);\n                    }\n                });\n                return;\n            }\n\n            // Item Preview\n            const passagesPreview = $(`[data-href*='${rdf_styles}']`);\n            if (passagesPreview.length) {\n                passagesPreview.each((h, passages) => {\n                    const passagePreviewClassName = passages.className.match(/[\\w-]*tao-[\\w-]*/g);\n                    if (passagePreviewClassName) {\n                        _formatStyles(linkTag.sheet, passagePreviewClassName[0]);\n                    }\n                });\n                return;\n            }\n        }\n    }\n\n    function _formatStyles(linkTag, className) {\n        /**\n         * @type {CSSRuleList}\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList\n         */\n        const { cssRules } = linkTag || {};\n        const CSSStyleSheet = linkTag || {};\n        const classNameFormated = className && className.length ? `.${className}` : '';\n\n        // prefix rules\n        const scopedCssRules = _scopeStyles(cssRules, classNameFormated, ['body html *']);\n\n        if (cssRules && scopedCssRules) {\n            Object.values(cssRules).map((index, rule) => {\n                CSSStyleSheet.deleteRule(index);\n            });\n            const newRules = scopedCssRules.split('\\n');\n            Object.values(newRules).map(rule => {\n                CSSStyleSheet.insertRule(rule);\n            });\n        }\n\n        return;\n    };\n\n    /**\n     * Apply selector replacement and scope prefixing to a set of style rules\n     * @param {CSSRuleList} cssRules\n     * @param {String} scopeSelector - applied as prefix; also used as replacementSelector if none specified\n     * @param {String[]} toReplace - list of selectors to be replaced by replacementSelector\n     * @param {String} replacementSelector\n     * @returns {String} styles, with scopeSelector prefix applied\n     */\n    function _scopeStyles (cssRules, scopeSelector, toReplace, replacementSelector) {\n        if (!cssRules) {\n            return '';\n        }\n\n        if (!replacementSelector) {\n            replacementSelector = scopeSelector;\n        }\n\n        const scopedStyles = Object.values(cssRules).map(rule => {\n            // avoid @import, @media, @keyframes etc\n\n            if (!rule.selectorText) {\n                return '';\n            }\n\n            /**\n             * Need to split selectorList apart from rules, before splitting it by comma\n             * @example CSS:\n             *   selector1, selector2 { rules; }\n             */\n            const rulesInBrackets = rule.cssText.substr(rule.selectorText.length).trim();\n            const selectors = rule.selectorText.split(/\\s*,\\s*/);\n\n            const scopedSelectors = [];\n\n            for (let singleSelectorText of selectors) {\n                // avoid the most obvious top level single selectors that won't work even if scoped\n                if (['html', 'body', '*'].includes(singleSelectorText)) {\n                    continue;\n                }\n\n                // make the replacements\n                if (scopeSelector && toReplace) {\n                    for (let toReplaceSelector of toReplace) {\n                        if (singleSelectorText.includes(toReplaceSelector)) {\n                            singleSelectorText = singleSelectorText.replace(\n                                new RegExp(toReplaceSelector, 'ig'),\n                                replacementSelector\n                            );\n                        }\n                    }\n                }\n\n                // has desired scoping been applied to the rule?\n                const containsScopeSelector =\n                    singleSelectorText.includes(`${scopeSelector} `) ||\n                    singleSelectorText.startsWith(scopeSelector) ||\n                    singleSelectorText.endsWith(scopeSelector);\n\n                // scope unscoped rule by the scope selector\n                if (scopeSelector && !containsScopeSelector) {\n                    scopedSelectors.push(`${scopeSelector} ${singleSelectorText}`);\n                } else {\n                    scopedSelectors.push(singleSelectorText);\n                }\n            }\n\n            if (scopedSelectors.length) {\n                return `${scopedSelectors.join(',')} ${rulesInBrackets}`;\n            }\n            return '';\n        });\n\n        return scopedStyles.filter(str => str.length > 0).join('\\n');\n    }\n\n    return {\n        handleStylesheetLoad\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2021 (original work) Open Assessment Technologies SA ;\n */\ndefine('taoMediaManager/richPassage/xincludeRendererAddStyles',[\n    'lodash',\n    'jquery',\n    'uri',\n    'util/url',\n    'core/dataProvider/request',\n    'taoMediaManager/qtiCreator/helper/formatStyles'\n], function (_, $, uri, urlUtil, request, formatStyles) {\n    'use strict';\n\n    return function xincludeRendererAddStyles(passageHref, passageClassName, serial, head = $('head'), preview = false) {\n        if (/taomedia:\\/\\/mediamanager\\//.test(passageHref)) {\n            // check rich passage styles and inject them to item\n            const passageUri = uri.decode(passageHref.replace('taomedia://mediamanager/', ''));\n            request(urlUtil.route('getStylesheets', 'SharedStimulusStyling', 'taoMediaManager'), {\n                uri: passageUri\n            })\n                .then(response => {\n                    response.children.forEach(stylesheet => {\n                        // check different names of stylesheets\n                        const link = urlUtil.route('loadStylesheet', 'SharedStimulusStyling', 'taoMediaManager', {\n                            uri: passageUri,\n                            stylesheet: stylesheet.name\n                        });\n                        const styleElem = $('<link>', {\n                            rel: 'stylesheet',\n                            type: 'text/css',\n                            href: link,\n                            'data-serial': passageUri\n                        });\n                        if (!preview) {\n                            styleElem[0].onload = (e => formatStyles.handleStylesheetLoad(e, stylesheet));\n                            styleElem[0].dataset['serial'] = serial;\n                        }\n                        head.append(styleElem);\n                    });\n                })\n                .catch();\n        }\n    };\n});\n\n","\ndefine(\"taoMediaManager/loader/xincludeRendererAddStyles.bundle\", function(){});\n"]}
